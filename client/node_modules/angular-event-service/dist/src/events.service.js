"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular/core");
const Rx = require("rxjs/Rx");
/**
 * Send and receive events with the .on .broadcast syntax.
 */
let EventsService = class EventsService {
    constructor() {
        this.listeners = {};
        this.eventsSubject = new Rx.Subject();
        this.events = Rx.Observable.from(this.eventsSubject);
        this.events.subscribe(({ name, args }) => {
            if (this.listeners[name]) {
                for (let listener of this.listeners[name]) {
                    listener(...args);
                }
            }
        });
    }
    /**
     * Listens an event and broadcasts it to the listeners.
     * @param  {string} name Event name
     * @param  {any} listener Function to call when receiving an event
     */
    on(name, listener) {
        if (!this.listeners[name]) {
            this.listeners[name] = [];
        }
        this.listeners[name].push(listener);
    }
    /**
     * Emits an event to all the listeners.
     * @param {string} name Name of the event to broadcast
     * @param {Array<any>} args Payload of arguments to send.
     */
    broadcast(name, ...args) {
        this.eventsSubject.next({
            name,
            args
        });
    }
    /**
     * Destroys the listener from the listener list.
     * @param  {string} name Event name
     * @param  {any} listener Callback function to delete
     */
    destroyListener(name, listener) {
        if (this.listeners[name] && this.listeners[name].indexOf(listener) > -1) {
            this.listeners[name].splice(this.listeners[name].indexOf(listener), 1);
        }
    }
};
EventsService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [])
], EventsService);
exports.EventsService = EventsService;
//# sourceMappingURL=events.service.js.map